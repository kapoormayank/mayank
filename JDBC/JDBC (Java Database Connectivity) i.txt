JDBC (Java Database Connectivity) is a standard Java API that provides a mechanism for Java applications to connect to, query, and update data in relational databases. It acts as a bridge, allowing a single Java application to interact with various database systems (like MySQL, Oracle, PostgreSQL, etc.) using a uniform set of interfaces.

Core JDBC Steps and Components
The standard workflow for a Java application using JDBC involves six key steps and several core API components:

1. Import Packages
You must import the necessary classes, primarily from the java.sql package.
Syntax: import java.sql.*;

2. Load and Register the Driver
Though often handled automatically by modern JDBC drivers (JDBC 4.0 and later), traditionally you would explicitly load the database-specific driver class.
Syntax (Old method, often unnecessary now): Class.forName("com.mysql.cj.jdbc.Driver"); (Example for MySQL)

3. Establish a Connection
A Connection object is created to establish a session with the database using the JDBC URL, database username, and password.
Syntax:

Java

String DB_URL = "jdbc:mysql://localhost:3306/mydatabase";
String USER = "root";
String PASS = "mypassword";

try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS)) {
    // Connection established
} catch (SQLException e) {
    e.printStackTrace();
}
Connection Interface: Represents the actual connection session.

DriverManager Class: Manages the set of JDBC drivers. Its getConnection() method is used to establish the connection.

4. Create a Statement
A Statement object is used to execute SQL queries. For dynamic queries with parameters, a PreparedStatement is highly recommended to prevent SQL Injection and for better performance.
Syntax (for Statement):

Java

Statement stmt = conn.createStatement();
Syntax (for PreparedStatement):

Java

String sql = "INSERT INTO Employees (id, first_name, last_name) VALUES (?, ?, ?)";
PreparedStatement ps = conn.prepareStatement(sql);


5. Execute the Query
The Statement or PreparedStatement executes the SQL command.

executeQuery(String sql): Used for SELECT statements; returns a ResultSet.

executeUpdate(String sql): Used for INSERT, UPDATE, DELETE, or DDL statements; returns the number of rows affected.

Example Code (Executing a SELECT query):

Java

String QUERY = "SELECT id, name, age FROM Employees";
ResultSet rs = stmt.executeQuery(QUERY);


6. Process the Result Set and Clean Up
If a SELECT query was executed, the results are stored in a ResultSet object, which is iterated over to extract the data. Finally, all database resources (like ResultSet, Statement, and Connection) must be closed to free up memory, which is elegantly handled by the try-with-resources statement (as shown in Step 3).

Example Code (Processing Result Set):

Java

while (rs.next()) {
    // Retrieve by column name or index
    int id = rs.getInt("id");
    String name = rs.getString("name");
    int age = rs.getInt("age");

    System.out.println("ID: " + id + ", Name: " + name + ", Age: " + age);
}


ResultSet Interface: Represents the table of data returned by a database query.

SQLException Class: Used for handling database access errors.

Complete JDBC Code Example (Reading Records)
This example uses the modern try-with-resources structure to ensure the Connection, Statement, and ResultSet are automatically closed.

Java

import java.sql.*;

public class JdbcReadExample {
    // Database credentials and URL
    static final String DB_URL = "jdbc:mysql://localhost:3306/hr_db";
    static final String USER = "guest";
    static final String PASS = "guest123";
    static final String QUERY = "SELECT id, name, salary FROM staff";

    public static void main(String[] args) {
        // Use try-with-resources for auto-closing resources
        try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(QUERY)) {

            // Process the result set
            while (rs.next()) {
                // Retrieve data
                int id = rs.getInt("id");
                String name = rs.getString("name");
                double salary = rs.getDouble("salary");

                // Display values
                System.out.printf("ID: %d, Name: %s, Salary: %.2f%n", id, name, salary);
            }
        } catch (SQLException e) {
            // Handle errors for JDBC
            e.printStackTrace();
        }
    }
}