JAVA DATABASE CONNECTOR

1. Connection Pooling üóÉÔ∏è
Explanation: Connection pooling is a technique used to manage and reuse a fixed number of database connections. Establishing a new database connection for every client request is a very slow and resource-intensive operation.

How it works: Instead of closing a connection after use, it is returned to a pool, where it waits to be used by the next client request. This drastically reduces the overhead of database access, leading to a significant boost in application performance and scalability.

Key API: Managed using the javax.sql.DataSource interface (often implemented by third-party libraries like HikariCP or c3p0).

2. PreparedStatement (for performance and security) üõ°Ô∏è
Explanation: The PreparedStatement interface is a subclass of Statement used to execute pre-compiled SQL queries that can accept runtime parameters.

Feature	Benefit
Performance	The database compiles and optimizes the SQL statement once, and then the prepared statement object can be executed repeatedly with different parameter values, making subsequent executions much faster.
Security	It enforces a separation between the SQL command and the data. All user input is treated strictly as data (not executable code), which is the most effective defense against SQL Injection attacks.

Export to Sheets
Example:
Instead of concatenating a string:
"SELECT * FROM users WHERE name = '" + userInput + "'" (Vulnerable)

Using a PreparedStatement with a placeholder:
PreparedStatement ps = conn.prepareStatement("SELECT * FROM users WHERE name = ?")

3. Transaction Management üíæ
Explanation: Transaction management ensures that a sequence of database operations is treated as a single, logical unit of work, adhering to the ACID properties (Atomicity, Consistency, Isolation, Durability).

How it works in JDBC:

Disable Auto-Commit: By default, JDBC sets auto-commit to true. Advanced transaction management requires setting it to false: connection.setAutoCommit(false);

Execute Operations: Run multiple SQL commands (e.g., a debit and a credit).

Commit/Rollback:

If all operations succeed, call connection.commit();

If any operation fails, call connection.rollback(); to undo all changes made since the last commit.

4. CallableStatement (for Stored Procedures) ‚öôÔ∏è
Explanation: The CallableStatement interface is a specialized extension of PreparedStatement used exclusively to execute Stored Procedures and Database Functions stored directly within the database.

Key Features:

It supports not only input parameters (IN) but also parameters for output (OUT) and parameters that are both input and output (INOUT).

Executing logic on the database server minimizes network traffic and can often leverage server-side optimizations, improving efficiency for complex business logic.

5. Scrollable/Updatable Result Sets ‚ÜïÔ∏è
Explanation: The standard JDBC ResultSet is non-scrollable and non-updatable (meaning you can only read forward once). These advanced types provide more flexibility:

Type	Functionality	Creation Mode
Scrollable Result Sets	Allows the cursor to move both forward and backward (previous()), jump to a specific row (absolute(int)), or check if a row is the first or last.	Must be explicitly requested when creating the statement (e.g., Statement.executeQuery(sql, ResultSet.TYPE_SCROLL_INSENSITIVE, ...)).
Updatable Result Sets	Allows changes to the database to be made directly through the ResultSet object itself, using methods like updateString(), updateRow(), insertRow(), and deleteRow().	Must also be explicitly requested when creating the statement (e.g., Statement.executeQuery(sql, ..., ResultSet.CONCUR_UPDATABLE)).



